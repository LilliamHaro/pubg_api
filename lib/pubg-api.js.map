{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"pubg-api.js","sourcesContent":["const https = require('https');\nconst rx = require('rxjs');\n\n/**\n *  PUBG API wrapper\n *\n *  Read the README, and the contributing guidelines to contribute to this project.\n *  Append your name/pseudo + github account here\n *\n *  - Alan Balbo <alan.balbo@gmail.com> : https://github.com/Wobow\n */\n\nclass PubgApi {\n  /**\n  * Sets up the api key to use, and the default shard to request.\n  * @param {string} apiKey - The api key used to request the PUBG API.\n  * @param {string} options - An object with options to pass to the api.\n  *   **asyncType** : 'promise' or 'observable'\n  *   **defaultShard** :  the default shard, or server to request :\n  *  - xbox-as - Asia\n  *  - xbox-eu - Europe\n  *  - xbox-na - North America\n  *  - xbox-oc - Oceania\n  *  - pc-krjp - Korea/Japan\n  *  - pc-na - North America\n  *  - pc-eu - Europe\n  *  - pc-oc - Oceania\n  *  - pc-kakao\n  *  - pc-sea - South East Asia\n  *  - pc-sa - South and Central America\n  *  - pc-as - Asia\n  *\n  * @returns The instance of pubgapi, set up correctly.\n  */\n  constructor(apiKey, options = {\n    asyncType: 'promise',\n    defaultShard: 'pc-na',\n  }) {\n    this.apiKey = undefined;\n    this.apiURL = 'api.playbattlegrounds.com';\n    this.telemetryURL = 'telemetry-cdn.playbattlegrounds.com';\n    this.defaultShard = options.defaultShard || 'pc-na';\n    this.asyncType = options.asyncType || 'promise';\n    this.routesURI = {\n      matches: 'matches',\n    };\n\n    if (this.asyncType !== 'promise' && this.asyncType !== 'observable') {\n      throw new Error('Unknown async type. Should be promise or observable');\n    }\n\n    this.wrapAsync = (promise) => {\n      if (this.asyncType === 'observable') {\n        return rx.Observable.fromPromise(promise);\n      }\n      return promise;\n    };\n\n    /**\n    * Sets the api key for the pubg api\n    * @param {string} apiKey The api key to use\n    */\n    this.setAPIKey = (newApiKey) => {\n      this.apiKey = newApiKey;\n    };\n\n    /**\n    * Sends a request to the pubg api server, and returns a promise with the result.\n    *\n    * @param {string} shard - The shard to request.\n    * @param {string} route - The URI to call. Corresponds to the part of the route after the shard.\n    * **Do not append** a slash before of after.\n    * @param {[key: string]: string} params - An object with the query params correponding to the route. See the official documentation : https://developer.playbattlegrounds.com/docs/\n    *\n    * @returns A promise with the result, or an error\n    */\n    this.requestAPI = (shard, route, params) => new Promise((resolve, reject) => {\n      let queryParams = '';\n      Object.keys(params).forEach((key) => {\n        queryParams += queryParams.length ? `&${key}=${params[key]}` : `?${key}=${params[key]}`;\n      });\n      const headers = {\n        Accept: 'application/vnd.api+json',\n        Authorization: `Bearer ${this.apiKey}`,\n      };\n      let rawData = '';\n      const req = https.get({\n        hostname: this.apiURL,\n        path: `/shards/${shard}/${route}${queryParams}`,\n        headers,\n      }, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', (data) => {\n          rawData += data;\n        });\n        res.on('end', () => {\n          try {\n            const parsedData = JSON.parse(rawData);\n            if (res.statusCode >= 400) {\n              return reject(parsedData);\n            }\n            return resolve(parsedData);\n          } catch (err) {\n            return reject(err);\n          }\n        });\n      });\n      req.on('error', e => reject(e));\n    });\n\n    /**\n    * Loads matches for the default shard. You can specify filters, page info and sorting type\n    *\n    * https://developer.playbattlegrounds.com/docs/en/matches.html#/Matches/get_matches\n    *\n    * @param {object} params - An object with one or many of the following params:\n    * - gameMode : 'squad', ...\n    * - playerIds : an array of player ids.\n    * - createdAtStart : Must occur before end time. Format is iso8601. Default: now() - 14 days\n    * - createdAtEnd : The max date of the result matches.\n    * - offset : Paging\n    * - limit : Number of results max\n    * - sort: 'createdAt' or '-createdAt'. Default: createdAt (ascending)\n    * @returns A Promise with the result or an error\n    */\n    this.loadMatches = (params = {\n      gameMode: undefined,\n      playerIds: undefined,\n      createdAtStart: undefined,\n      createdAtEnd: undefined,\n      offset: 0,\n      limit: 5,\n      sort: 'createdAt',\n    }, shard = this.defaultShard) => {\n      const computedFilters = {};\n      const paramFilters = {\n        gameMode: 'filter[gameMode]',\n        playerIds: 'filter[playerIds]',\n        createdAtEnd: 'filter[createdAt-end]',\n        createdAtStart: 'filter[createdAt-start]',\n        sort: 'sort',\n        offset: 'page[offset]',\n        limit: 'page[limit]',\n      };\n      Object.keys(params).forEach((key) => {\n        if (params[key] !== undefined) {\n          computedFilters[paramFilters[key]] = params[key];\n        }\n      });\n      return this.wrapAsync(this.requestAPI(\n        shard,\n        this.routesURI.matches,\n        Object.keys(computedFilters).length ? computedFilters : undefined,\n      ));\n    };\n\n    /**\n    * Loads a single match within the default shard, given the id.\n    *\n    * https://developer.playbattlegrounds.com/docs/en/matches.html#/Matches/get_matches__id_\n    *\n    * @param {string} matchId - The id of the match to load\n    *\n    * @returns A Promise with the result or an error\n    */\n    this.loadMatchById = (matchId, shard = this.defaultShard) =>\n      this.wrapAsync(this.requestAPI(shard, this.routesURI.matches + matchId));\n\n    /**\n    * Checks the health status of the api.\n    *\n    * https://developer.playbattlegrounds.com/docs/en/status.html#/Status/get_status\n    *\n    * @returns A promise with the result\n    */\n    this.healthStatus = () => this.wrapAsync(new Promise((resolve, reject) => {\n      const req = https.get({\n        hostname: this.apiURL,\n        path: 'status',\n        headers: { Accept: 'application/vnd.api+json' },\n      }, success => resolve(success));\n      req.on('error', e => reject(e));\n    }));\n  }\n}\n\nmodule.exports = PubgApi;\n"]}